package poeMultitool;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.security.GeneralSecurityException;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Haris Koktsidis
 */
public class PoeMultitoolGUI extends javax.swing.JFrame {

    private javax.swing.Timer controlPanelTimer; // Poe.xyz refresh timer
    private javax.swing.Timer mailTimer;        // Mail check timer
    private javax.swing.Timer poePMTimer;       // PM Notifier timer
    
    /**
     * Calls the method to declare and initializes the GUI of Poe Multitool automatically.
     * Do not edit.
     */
    public PoeMultitoolGUI()
    {
        DESCipher.createEncryptedFile();
        initComponents();
        try 
        {
            urlTextField.setText(DESCipher.decryptIdentifier("URL"));
            usernameTextField.setText(DESCipher.decryptIdentifier("Username"));
            passwordTextField.setText(DESCipher.decryptIdentifier("Password"));
            installDirectoryTextField.setText(DESCipher.decryptIdentifier("DIR"));
        } 
        catch (GeneralSecurityException ex) 
        {
            HelpfulFunctions.displayPopupError(ex.getMessage(), 503);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: DO NOT MODIFY THIS CODE. 
     * The content of this method is AUTOMATICALLY regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userDataDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        usernameTextFieldDialog = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        passwordTextFieldDialog = new javax.swing.JPasswordField();
        urlTextFieldDialog = new javax.swing.JTextField();
        poeInstallDirTextFieldDialog = new javax.swing.JTextField();
        okButtonDialog = new javax.swing.JButton();
        closeButtonDialog = new javax.swing.JButton();
        multitoolPane = new javax.swing.JTabbedPane();
        poexyzPanel = new javax.swing.JPanel();
        urlTextField = new javax.swing.JTextField();
        urlLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        statusTextField = new javax.swing.JTextField();
        startStopButton = new javax.swing.JToggleButton();
        updateTextField = new javax.swing.JTextField();
        lastUpdateLabel = new javax.swing.JLabel();
        countdownLabel = new javax.swing.JLabel();
        mailCheckPanel = new javax.swing.JPanel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        checkLabel = new javax.swing.JLabel();
        mailCountdownLabel = new javax.swing.JLabel();
        newMessagesTextField = new javax.swing.JTextField();
        statusMailsTextField = new javax.swing.JTextField();
        lastCheckTextField = new javax.swing.JTextField();
        statusMailLabel = new javax.swing.JLabel();
        lastCheckMailLabel = new javax.swing.JLabel();
        startStopMailButton = new javax.swing.JToggleButton();
        pmNotifierPanel = new javax.swing.JPanel();
        pmNotifierButton = new javax.swing.JToggleButton();
        installDirectoryTextField = new javax.swing.JTextField();
        installDirLabel = new javax.swing.JLabel();
        statusPMLabel = new javax.swing.JLabel();
        statusPMTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        editStoreDataMenuItem = new javax.swing.JMenuItem();
        deleteDataMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        userDataDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        userDataDialog.setTitle("Edit stored user data");
        userDataDialog.setLocationByPlatform(true);
        userDataDialog.setMaximumSize(new java.awt.Dimension(380, 250));
        userDataDialog.setMinimumSize(new java.awt.Dimension(380, 250));
        userDataDialog.setModal(true);
        userDataDialog.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        userDataDialog.setPreferredSize(new java.awt.Dimension(380, 250));
        userDataDialog.setResizable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Username:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Password:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Control URL:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("PoE install DIR:");

        okButtonDialog.setText("Save");
        okButtonDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonDialogActionPerformed(evt);
            }
        });

        closeButtonDialog.setText("Close");
        closeButtonDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userDataDialogLayout = new javax.swing.GroupLayout(userDataDialog.getContentPane());
        userDataDialog.getContentPane().setLayout(userDataDialogLayout);
        userDataDialogLayout.setHorizontalGroup(
            userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDataDialogLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userDataDialogLayout.createSequentialGroup()
                        .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(userDataDialogLayout.createSequentialGroup()
                                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(3, 3, 3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTextFieldDialog)
                            .addComponent(passwordTextFieldDialog)
                            .addComponent(urlTextFieldDialog)
                            .addComponent(poeInstallDirTextFieldDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(userDataDialogLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(okButtonDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(closeButtonDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        userDataDialogLayout.setVerticalGroup(
            userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDataDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextFieldDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextFieldDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(urlTextFieldDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(poeInstallDirTextFieldDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButtonDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButtonDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        userDataDialog.getAccessibleContext().setAccessibleName("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setMaximumSize(new java.awt.Dimension(365, 350));
        setMinimumSize(new java.awt.Dimension(365, 350));
        setResizable(false);

        poexyzPanel.setMaximumSize(new java.awt.Dimension(360, 300));
        poexyzPanel.setMinimumSize(new java.awt.Dimension(360, 300));
        poexyzPanel.setPreferredSize(new java.awt.Dimension(360, 300));

        urlTextField.setToolTipText("Copy and paste the complete URL of your poe.xyz.is control panel.");

        urlLabel.setText("URL :");

        statusLabel.setText("Status:");

        timerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        timerLabel.setText("Refreshing in:");

        statusTextField.setEditable(false);
        statusTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        statusTextField.setText("Waiting...");

        startStopButton.setText("Start");
        startStopButton.setMaximumSize(new java.awt.Dimension(60, 30));
        startStopButton.setMinimumSize(new java.awt.Dimension(60, 30));
        startStopButton.setPreferredSize(new java.awt.Dimension(60, 30));
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });

        updateTextField.setEditable(false);
        updateTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        lastUpdateLabel.setText("Last Update:");

        countdownLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        countdownLabel.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout poexyzPanelLayout = new javax.swing.GroupLayout(poexyzPanel);
        poexyzPanel.setLayout(poexyzPanelLayout);
        poexyzPanelLayout.setHorizontalGroup(
            poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(poexyzPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, poexyzPanelLayout.createSequentialGroup()
                        .addComponent(timerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countdownLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, poexyzPanelLayout.createSequentialGroup()
                        .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusLabel)
                            .addComponent(lastUpdateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
            .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(poexyzPanelLayout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(urlLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(27, Short.MAX_VALUE)))
        );
        poexyzPanelLayout.setVerticalGroup(
            poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(poexyzPanelLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(timerLabel)
                    .addComponent(countdownLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(poexyzPanelLayout.createSequentialGroup()
                        .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusLabel)
                            .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastUpdateLabel)))
                    .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(poexyzPanelLayout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(poexyzPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(urlLabel))
                    .addContainerGap(249, Short.MAX_VALUE)))
        );

        multitoolPane.addTab("Poe.Xyz Online Refresher", poexyzPanel);

        passwordLabel.setText("Password:");

        usernameLabel.setText("Login mail:");

        checkLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        checkLabel.setText("Checking mail in:");

        mailCountdownLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mailCountdownLabel.setForeground(new java.awt.Color(255, 51, 51));

        newMessagesTextField.setEditable(false);
        newMessagesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newMessagesTextField.setText("You have 0 new messages");

        statusMailsTextField.setEditable(false);
        statusMailsTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        statusMailsTextField.setText("Waiting...");

        lastCheckTextField.setEditable(false);
        lastCheckTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        statusMailLabel.setText("Status:");

        lastCheckMailLabel.setText("Last Check:");

        startStopMailButton.setText("Start");
        startStopMailButton.setMaximumSize(new java.awt.Dimension(60, 30));
        startStopMailButton.setMinimumSize(new java.awt.Dimension(60, 30));
        startStopMailButton.setPreferredSize(new java.awt.Dimension(60, 30));
        startStopMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopMailButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mailCheckPanelLayout = new javax.swing.GroupLayout(mailCheckPanel);
        mailCheckPanel.setLayout(mailCheckPanelLayout);
        mailCheckPanelLayout.setHorizontalGroup(
            mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailCheckPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mailCheckPanelLayout.createSequentialGroup()
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(usernameLabel)
                            .addComponent(passwordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameTextField)
                            .addComponent(passwordTextField))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mailCheckPanelLayout.createSequentialGroup()
                        .addComponent(newMessagesTextField)
                        .addContainerGap())
                    .addGroup(mailCheckPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(checkLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mailCountdownLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(56, Short.MAX_VALUE))
                    .addGroup(mailCheckPanelLayout.createSequentialGroup()
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lastCheckMailLabel)
                            .addComponent(statusMailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statusMailsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(lastCheckTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startStopMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        mailCheckPanelLayout.setVerticalGroup(
            mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailCheckPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addGap(41, 41, 41)
                .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mailCountdownLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addComponent(newMessagesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mailCheckPanelLayout.createSequentialGroup()
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusMailsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusMailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mailCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastCheckTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastCheckMailLabel)))
                    .addComponent(startStopMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 38, Short.MAX_VALUE))
        );

        multitoolPane.addTab("Mail Check", mailCheckPanel);

        pmNotifierButton.setText("Enable");
        pmNotifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmNotifierButtonActionPerformed(evt);
            }
        });

        installDirLabel.setText("Enter the full installation directory of Path of Exile:");

        statusPMLabel.setText("Status: ");

        statusPMTextField.setEditable(false);
        statusPMTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout pmNotifierPanelLayout = new javax.swing.GroupLayout(pmNotifierPanel);
        pmNotifierPanel.setLayout(pmNotifierPanelLayout);
        pmNotifierPanelLayout.setHorizontalGroup(
            pmNotifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pmNotifierPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pmNotifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(installDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pmNotifierPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(installDirLabel)))
                .addGap(0, 24, Short.MAX_VALUE))
            .addGroup(pmNotifierPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(pmNotifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pmNotifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pmNotifierPanelLayout.createSequentialGroup()
                        .addComponent(statusPMLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusPMTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pmNotifierPanelLayout.setVerticalGroup(
            pmNotifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pmNotifierPanelLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(installDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(pmNotifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusPMLabel)
                    .addComponent(statusPMTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pmNotifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        multitoolPane.addTab("PM Notifier", pmNotifierPanel);

        jMenu2.setText("Settings");

        editStoreDataMenuItem.setText("Edit stored data");
        editStoreDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStoreDataMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(editStoreDataMenuItem);

        deleteDataMenu.setText("Delete stored data");
        deleteDataMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataMenuActionPerformed(evt);
            }
        });
        jMenu2.add(deleteDataMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("About");

        jMenuItem1.setText("About PoE Multitool");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multitoolPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(multitoolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getAccessibleContext().setAccessibleName("mainFrame");

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Action listener for the toggle button in the poe.xyz.is online stats
     * refresher, located in the Poe.Xyz Online Refresher panel.
     * When activated it starts counting down a ControlPanelTimer clock with a 
     * ControlPanelTimeTask task associated. 
     * If deactivated controlPanelTimer stops any running clocks and alters the 
     * appearance of certain text fields in the GUI.
     * @param evt the event that fired the listener, in this case toggle start 
     * or stop button located in the control panel refresher panel.
     */
    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        if (startStopButton.isSelected())
        {
            // Button activated. Starting clock and updating labels...
            urlTextField.setEditable(false);
            countdownLabel.setText(HelpfulFunctions.countdownToText(0));
            ControlPanelTimeTask tc = new ControlPanelTimeTask();
            controlPanelTimer = new javax.swing.Timer(1000, tc);
            controlPanelTimer.start();
            startStopButton.setText("Stop");
        }
        else
        {
            // Button deactivated. Stopping clock and updating labels...
            urlTextField.setEditable(true);
            controlPanelTimer.stop();
            countdownLabel.setText("Stopped.");
            startStopButton.setText("Start");
            statusTextField.setText("Waiting...");
        }
    }//GEN-LAST:event_startStopButtonActionPerformed
    /**
     * Action listener for the toggle button in the Mail Checker panel. When 
     * activated it starts counting down a mailTimer clock with a 
     * MailCheckTimeTask associated. If deactivated it stops any running clocks
     * and alters the appearance of certain text fields in the GUI.
     * @param evt the event that fired the listener, in this case toggle start 
     * or stop mail check button.
     */
    private void startStopMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopMailButtonActionPerformed
        if (startStopMailButton.isSelected())
        {
            // Button activated. Starting clock and updating labels...
            mailCountdownLabel.setText(HelpfulFunctions.countdownToText(0));
            MailCheckTimeTask tc = new MailCheckTimeTask();
            mailTimer = new javax.swing.Timer(1000, tc);
            mailTimer.start();
            startStopMailButton.setText("Stop");
            usernameTextField.setEditable(false);
            passwordTextField.setEditable(false);
        }
        else
        {
            // Button deactivated. Stopping clock and updating labels...
            mailTimer.stop();
            mailCountdownLabel.setText("Stopped.");
            startStopMailButton.setText("Start");
            statusMailsTextField.setText("Waiting...");
            usernameTextField.setEditable(true);
            passwordTextField.setEditable(true);
        }
    }//GEN-LAST:event_startStopMailButtonActionPerformed
    /**
     * Action listener for the toggle button in the PM notifier panel. When 
     * activated it starts counting down a pmNotifierTimer clock with a 
     * PoePMTask associated. If deactivated it stops any running clocks
     * and alters the appearance of certain text fields in the GUI.
     * @param evt the event that fired the listener, in this case toggle enable 
     * or disable the pm notifier button.
     */
    private void pmNotifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmNotifierButtonActionPerformed
            if (pmNotifierButton.isSelected())
            {
                // Button activated. Starting clock and updating labels...
                installDirectoryTextField.setEditable(false);
                PoePMTask tc = new PoePMTask(installDirectoryTextField.getText());
                poePMTimer = new javax.swing.Timer(1000, tc);
                poePMTimer.start();
                statusPMTextField.setText("Running...");
                pmNotifierButton.setText("Disable");
            }
            else
            {
                // Button deactivated. Stopping clock and updating labels...
                poePMTimer.stop();
                pmNotifierButton.setText("Enable");
                statusPMTextField.setText("Waiting...");
                installDirectoryTextField.setEditable(true);
            }
    }//GEN-LAST:event_pmNotifierButtonActionPerformed
    
    /**
     * Edit Stored Data Button Listener. Pops up the dialog to save stored data input.
     * @param evt 
     */
    private void editStoreDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStoreDataMenuItemActionPerformed
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - userDataDialog.getWidth()) / 2;
        final int y = (screenSize.height - userDataDialog.getHeight()) / 2;
        userDataDialog.setLocation(x, y);
        try 
        { 
            usernameTextFieldDialog.setText(DESCipher.decryptIdentifier("Username"));
            passwordTextFieldDialog.setText(DESCipher.decryptIdentifier("Password"));
            urlTextFieldDialog.setText(DESCipher.decryptIdentifier("URL"));
            poeInstallDirTextFieldDialog.setText(DESCipher.decryptIdentifier("DIR"));
        }
        catch (GeneralSecurityException ex) 
        {
            HelpfulFunctions.displayPopupError(ex.getMessage(), 500);
        }
        userDataDialog.setVisible(true);
    }//GEN-LAST:event_editStoreDataMenuItemActionPerformed

    private void okButtonDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonDialogActionPerformed
        DESCipher.createEncryptedFile();
        StringBuilder password = new StringBuilder();
        for (int i=0; i<passwordTextFieldDialog.getPassword().length; i++)
        {
             password.append(passwordTextFieldDialog.getPassword()[i]);
        }
        try 
        {
            DESCipher.encrypt(usernameTextFieldDialog.getText(), password.toString(), urlTextFieldDialog.getText(), poeInstallDirTextFieldDialog.getText());
        } 
        catch (GeneralSecurityException ex) 
        {
            HelpfulFunctions.displayPopupError(ex.getMessage(), 501);
        }
        password = null;
    }//GEN-LAST:event_okButtonDialogActionPerformed

    private void closeButtonDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonDialogActionPerformed
        userDataDialog.dispose();
        try 
        {
            urlTextField.setText(DESCipher.decryptIdentifier("URL"));
            usernameTextField.setText(DESCipher.decryptIdentifier("Username"));
            passwordTextField.setText(DESCipher.decryptIdentifier("Password"));
            installDirectoryTextField.setText(DESCipher.decryptIdentifier("DIR"));
        } 
        catch (GeneralSecurityException ex) 
        {
            HelpfulFunctions.displayPopupError(ex.getMessage(), 502);
        }
    }//GEN-LAST:event_closeButtonDialogActionPerformed

    private void deleteDataMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataMenuActionPerformed
        boolean deleted = DESCipher.deleteUserData();
        if (deleted == true)
        {
            urlTextField.setText("");
            usernameTextField.setText("");
            passwordTextField.setText("");
            installDirectoryTextField.setText("");
        }
        else
        {
            HelpfulFunctions.displayPopupError("Failed to delete userdata.txt file. Please manually delete the file and restart the program.", 202);
        }
    }//GEN-LAST:event_deleteDataMenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
     JOptionPane.showMessageDialog(
                null, 
                "Current version: 0.1\n\nDeveloped and maintaned by Haris Koktsidis.", 
                "About PoE Multitool", 
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PoeMultitoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PoeMultitoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PoeMultitoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PoeMultitoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() 
            {
                final PoeMultitoolGUI GUI = new PoeMultitoolGUI();
                GUI.setTitle("PoE Multitool");
                GUI.setVisible(true);
            }
        });
    }
    
     /**
     * Describes and implements the looping of a clock of the poexyz control status refresher
     * and the actions it should do when the clock runs out The specific actions are:
     * 1) Open the control panel link that the user has provided in frequent intervals (default: 59 minutes 50 seconds)
     * 2) Click the "prolongate" online status link.
     */
    public class ControlPanelTimeTask implements ActionListener
    {
        // The countdown left on the clock. Default: 3590 when the clock starts ticking.
        int localPoeXyzCountdown;

        @Override
        public void actionPerformed(ActionEvent e)
        {
            // Reducing seconds on the clock on each tick....
            localPoeXyzCountdown--;
            
            // If the clock hasn't run out update the timer on the GUI...
            if (localPoeXyzCountdown >=0)
            {
                countdownLabel.setText(HelpfulFunctions.countdownToText(localPoeXyzCountdown));
            }
            // When the clock runs out refresh the online status and reset the clock...
            else
            {
                    localPoeXyzCountdown = 3590;
                    countdownLabel.setText(HelpfulFunctions.countdownToText(localPoeXyzCountdown));
                    statusTextField.setText("Refreshing online status...");
                    PoeAutoRefresh pinger = new PoeAutoRefresh();
                    // Initializing and executing the refresh...
                    int returnCode = pinger.pingServer( urlTextField.getText(),  new Frame());
                    // Successfull refresh, updating labels...
                    if (returnCode == 0)
                    {
                        statusTextField.setText("Refresh sucessful.");
                        Date date = new Date();
                        updateTextField.setText(HelpfulFunctions.timeToString(date));
                    }
                    // Refresh failed, updating labels to display the error.
                    else
                    {
                        countdownLabel.setText("Cancelled.");
                        statusTextField.setText("Error. Invalid URL.");
                        controlPanelTimer.stop();
                        startStopButton.setSelected(false);
                        startStopButton.setText("Start");
                    }
            }
        }
    }   
    
    /**
     * Describes and implements the looping of a clock of the mail checker 
     * and the actions it should do when the clock runs out The specific actions are:
     * 1) Log on the pathofexile.com site in frequent intervals (default: 15 minutes)
     * 2) Detect if there are unread messages in the mailbox (The link must display 'X MESSAGES')
     * 3) Notify the user if there are unread messages by playing a sound file.
     */
    public class MailCheckTimeTask implements ActionListener
    {
        // The countdown left on the clock. Default: 900 when cloak starts to tick.
        int localMailCountdown = 0;

        @Override
        public void actionPerformed(ActionEvent e)
        {
            // Reducing seconds on the cloak...
            localMailCountdown--;
            // Updating the countdown on the GUI before the clock runs out...
            if (localMailCountdown >=0)
            {
                mailCountdownLabel.setText(HelpfulFunctions.countdownToText(localMailCountdown));
            }
            // When the clock runs out fire the mail checker and refresh duration...
            else
            {
                    localMailCountdown = 900;
                    mailCountdownLabel.setText(HelpfulFunctions.countdownToText(localMailCountdown));
                    lastCheckTextField.setText("Checking Mail...");
                    PoeAutoMessageRefresh mailman = new PoeAutoMessageRefresh();
                    // Reading password into String format..
                    StringBuilder password = new StringBuilder();
                    for (int i=0; i<passwordTextField.getPassword().length; i++)
                    {
                        password.append(passwordTextField.getPassword()[i]);
                    }
                    // Initializing and executing mail checker...
                    int returnCode = mailman.checkMessages(new Frame(), usernameTextField.getText(), password.toString());
                    password = null; // Clearing password.
                    // Successfull login, reading number of mails and printing...
                    if (returnCode >= 0)
                    {
                        statusMailsTextField.setText("Check complete.");
                        newMessagesTextField.setText("You have "+ returnCode +" new messages.");
                        if (returnCode >0)
                        {
                            // Playing beep sound if there are new mails.
                            HelpfulFunctions.playNotificationSound(1);
                        }
                        Date date = new Date();
                        lastCheckTextField.setText(HelpfulFunctions.timeToString(date));
                    }
                    // Login failed...
                    else
                    {
                        mailCountdownLabel.setText("Cancelled.");
                        statusMailsTextField.setText("Error. Invalid credentials.");
                        mailTimer.stop();
                        startStopMailButton.setSelected(false);
                        startStopMailButton.setText("Start");
                    }
            }
        }
    }

    /**
     * Describes and implements the looping of a clock of the PM Notifier 
     * and the actions it should do when the clock runs out. The specific actions are: 
     * 1) Check for any potential changes in the log file in frequent intervals (default: 5 seconds)
     * 2) If a change is detected, check if it's a PM (the log file entry must contain the '@' character)
     * 3) If the change is confirmed to be a PM notify the user by playing a sound file.
     */
    public class PoePMTask implements ActionListener
    {
        // The countdown left on the clock. Default: 900 when cloak starts to tick.
        int localPMCountdown = 0;
        String tempDir, finalInstalDir;
        File logFile;
        long originalFileSize = 0, newFileSize = 0;
        
        PoePMTask(String installDirectory)
        {
            tempDir = installDirectory;
            finalInstalDir = tempDir.concat("\\logs\\Client.txt");
            logFile = new File(finalInstalDir);
            originalFileSize = logFile.length();
        }

        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (!logFile.exists())
            {
                pmNotifierButton.doClick();
                HelpfulFunctions.displayPopupError("Invalid installation path. Please verify the installation path.", 201);
                return;
            }
            // Reducing seconds on the cloak...
            localPMCountdown--;
            // When the clock runs out fire the file size checker...
            if (localPMCountdown <= 0)
            {
                    // Reseting the clock...
                    localPMCountdown = 5;
                    newFileSize = logFile.length();
                    //A difference in the filesize has been noted. A change in the file has been noted.
                    if (newFileSize > originalFileSize)
                    {
                        PoePMNotifier notifier = new PoePMNotifier();
                        //If the last line contains a @ it's a PM, notify user and increase cooldown.
                        if (notifier.returnLastLine(logFile).contains("@"))
                        {
                            HelpfulFunctions.playNotificationSound(0);
                            localPMCountdown = 10;
                        }
                        originalFileSize = newFileSize;
                    }
             }
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel checkLabel;
    private javax.swing.JButton closeButtonDialog;
    private javax.swing.JLabel countdownLabel;
    private javax.swing.JMenuItem deleteDataMenu;
    private javax.swing.JMenuItem editStoreDataMenuItem;
    private javax.swing.JLabel installDirLabel;
    private javax.swing.JTextField installDirectoryTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel lastCheckMailLabel;
    private javax.swing.JTextField lastCheckTextField;
    private javax.swing.JLabel lastUpdateLabel;
    private javax.swing.JPanel mailCheckPanel;
    private javax.swing.JLabel mailCountdownLabel;
    private javax.swing.JTabbedPane multitoolPane;
    private javax.swing.JTextField newMessagesTextField;
    private javax.swing.JButton okButtonDialog;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JPasswordField passwordTextFieldDialog;
    private javax.swing.JToggleButton pmNotifierButton;
    private javax.swing.JPanel pmNotifierPanel;
    private javax.swing.JTextField poeInstallDirTextFieldDialog;
    private javax.swing.JPanel poexyzPanel;
    private javax.swing.JToggleButton startStopButton;
    private javax.swing.JToggleButton startStopMailButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusMailLabel;
    private javax.swing.JTextField statusMailsTextField;
    private javax.swing.JLabel statusPMLabel;
    private javax.swing.JTextField statusPMTextField;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JTextField updateTextField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JTextField urlTextFieldDialog;
    private javax.swing.JDialog userDataDialog;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JTextField usernameTextFieldDialog;
    // End of variables declaration//GEN-END:variables
}
